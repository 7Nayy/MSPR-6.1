"""
Tests d'accessibilit√© WCAG (Web Content Accessibility Guidelines) pour WildAware
V√©rifie la conformit√© aux niveaux A, AA et certains crit√®res AAA
"""
import pytest
import re
from bs4 import BeautifulSoup
from unittest.mock import patch, MagicMock
import colorsys


class WCAGTester:
    """Utilitaire pour tester la conformit√© WCAG"""

    def __init__(self, html_content):
        self.soup = BeautifulSoup(html_content, 'html.parser')

    def check_images_alt_text(self):
        """WCAG 1.1.1 (Niveau A) - Contenu non textuel"""
        images = self.soup.find_all('img')
        issues = []

        for img in images:
            if not img.get('alt'):
                issues.append(f"Image sans attribut alt: {img}")
            elif img.get('alt').strip() == '':
                issues.append(f"Image avec alt vide: {img}")

        return issues

    def check_heading_structure(self):
        """WCAG 1.3.1 (Niveau A) - Information et relations"""
        headings = self.soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])
        issues = []

        if not headings:
            issues.append("Aucun titre trouv√© sur la page")
            return issues

        # V√©rifier qu'il y a un H1
        h1_count = len(self.soup.find_all('h1'))
        if h1_count == 0:
            issues.append("Aucun titre H1 trouv√©")
        elif h1_count > 1:
            issues.append(f"Plusieurs titres H1 trouv√©s ({h1_count})")

        # V√©rifier la hi√©rarchie des titres
        previous_level = 0
        for heading in headings:
            level = int(heading.name[1])
            if level > previous_level + 1:
                issues.append(f"Saut de niveau de titre: {heading.name} apr√®s h{previous_level}")
            previous_level = level

        return issues

    def check_form_labels(self):
        """WCAG 1.3.1 (Niveau A) - Labels des formulaires"""
        inputs = self.soup.find_all(['input', 'textarea', 'select'])
        issues = []

        for input_field in inputs:
            # Ignorer les champs cach√©s et les boutons
            if input_field.get('type') in ['hidden', 'submit', 'button']:
                continue

            field_id = input_field.get('id')
            field_name = input_field.get('name')

            # Chercher un label associ√©
            label = None
            if field_id:
                label = self.soup.find('label', {'for': field_id})

            if not label:
                # Chercher un label parent
                label = input_field.find_parent('label')

            if not label:
                issues.append(f"Champ sans label: {input_field}")

        return issues

    def check_button_accessibility(self):
        """WCAG 2.4.4 (Niveau A) - Objectif des liens et boutons"""
        buttons = self.soup.find_all(['button', 'input[type="button"]', 'input[type="submit"]'])
        links = self.soup.find_all('a')
        issues = []

        # V√©rifier les boutons
        for button in buttons:
            text = button.get_text(strip=True)
            if not text and not button.get('aria-label') and not button.get('title'):
                issues.append(f"Bouton sans texte descriptif: {button}")

        # V√©rifier les liens
        for link in links:
            text = link.get_text(strip=True)
            if not text and not link.get('aria-label') and not link.get('title'):
                issues.append(f"Lien sans texte descriptif: {link}")
            elif text.lower() in ['cliquez ici', 'ici', 'lire plus', 'plus']:
                issues.append(f"Lien avec texte non descriptif: '{text}'")

        return issues

    def check_color_contrast(self):
        """WCAG 1.4.3 (Niveau AA) - Contraste des couleurs"""
        # Note: Test basique sur les styles inline
        # Dans un vrai projet, il faudrait analyser les CSS externes
        issues = []
        elements_with_style = self.soup.find_all(attrs={'style': True})

        for element in elements_with_style:
            style = element.get('style', '')
            if 'color:' in style and 'background' in style:
                # Analyse basique - dans la r√©alit√©, il faudrait un parser CSS complet
                issues.append(f"V√©rifier manuellement le contraste: {element}")

        return issues

    def check_semantic_structure(self):
        """WCAG 1.3.1 (Niveau A) - Structure s√©mantique"""
        issues = []

        # V√©rifier la pr√©sence de landmarks
        landmarks = self.soup.find_all(['main', 'nav', 'header', 'footer', 'aside', 'section'])
        if not landmarks:
            issues.append("Aucun √©l√©ment s√©mantique (main, nav, header, etc.) trouv√©")

        # V√©rifier la structure de base
        if not self.soup.find('main') and not self.soup.find(attrs={'role': 'main'}):
            issues.append("Pas de contenu principal identifi√© (balise <main> ou role='main')")

        return issues

    def check_keyboard_navigation(self):
        """WCAG 2.1.1 (Niveau A) - Navigation au clavier"""
        issues = []
        interactive_elements = self.soup.find_all(['a', 'button', 'input', 'select', 'textarea'])

        for element in interactive_elements:
            # V√©rifier les √©l√©ments qui pourraient bloquer la navigation clavier
            if element.get('tabindex') == '-1' and element.name != 'input':
                issues.append(f"√âl√©ment interactif non accessible au clavier: {element}")

        return issues

    def check_page_title(self):
        """WCAG 2.4.2 (Niveau A) - Titre de page"""
        issues = []
        title = self.soup.find('title')

        if not title:
            issues.append("Pas de balise <title> trouv√©e")
        elif not title.get_text(strip=True):
            issues.append("Titre de page vide")
        elif len(title.get_text(strip=True)) < 10:
            issues.append("Titre de page trop court (moins de 10 caract√®res)")

        return issues

    def check_language_attribute(self):
        """WCAG 3.1.1 (Niveau A) - Langue de la page"""
        issues = []
        html_tag = self.soup.find('html')

        if not html_tag or not html_tag.get('lang'):
            issues.append("Attribut lang manquant sur la balise <html>")

        return issues


def test_wcag_accessibility_homepage(client):
    """Test WCAG pour la page d'accueil"""
    response = client.get('/')
    assert response.status_code == 200

    tester = WCAGTester(response.data.decode('utf-8'))
    all_issues = []

    # Tests WCAG Niveau A
    all_issues.extend(tester.check_images_alt_text())
    all_issues.extend(tester.check_heading_structure())
    all_issues.extend(tester.check_form_labels())
    all_issues.extend(tester.check_button_accessibility())
    all_issues.extend(tester.check_semantic_structure())
    all_issues.extend(tester.check_keyboard_navigation())
    all_issues.extend(tester.check_page_title())
    all_issues.extend(tester.check_language_attribute())

    # Tests WCAG Niveau AA
    all_issues.extend(tester.check_color_contrast())

    # Afficher les probl√®mes trouv√©s
    if all_issues:
        print("\nüö® PROBL√àMES D'ACCESSIBILIT√â WCAG D√âTECT√âS:")
        for i, issue in enumerate(all_issues, 1):
            print(f"  {i}. {issue}")
        print(f"\nüìä Total: {len(all_issues)} probl√®mes trouv√©s")
    else:
        print("\n‚úÖ AUCUN PROBL√àME D'ACCESSIBILIT√â WCAG D√âTECT√â")

    # Le test √©choue s'il y a des probl√®mes critiques (optionnel)
    critical_issues = [issue for issue in all_issues if
                       'alt' in issue.lower() or 'label' in issue.lower() or 'title' in issue.lower()]

    assert len(critical_issues) == 0, f"Probl√®mes critiques d'accessibilit√©: {critical_issues}"


def test_wcag_accessibility_login_page(client):
    """Test WCAG pour la page de connexion"""
    response = client.get('/login')
    assert response.status_code == 200

    tester = WCAGTester(response.data.decode('utf-8'))
    all_issues = []

    # Focus sur les formulaires pour la page de connexion
    all_issues.extend(tester.check_form_labels())
    all_issues.extend(tester.check_button_accessibility())
    all_issues.extend(tester.check_page_title())
    all_issues.extend(tester.check_heading_structure())

    # V√©rifications sp√©cifiques aux formulaires de connexion
    soup = BeautifulSoup(response.data.decode('utf-8'), 'html.parser')

    # V√©rifier que les champs de mot de passe ont le bon type
    password_fields = soup.find_all('input', {'type': 'password'})
    if not password_fields:
        all_issues.append("Aucun champ de mot de passe trouv√© avec type='password'")

    # V√©rifier que les champs email ont le bon type
    email_fields = soup.find_all('input', {'type': 'email'})
    username_fields = soup.find_all('input', {'name': 'username'})
    if not email_fields and not username_fields:
        all_issues.append("Aucun champ email/username trouv√©")

    if all_issues:
        print(f"\nüö® PROBL√àMES WCAG PAGE CONNEXION: {len(all_issues)} trouv√©s")
        for issue in all_issues:
            print(f"  - {issue}")
    else:
        print("\n‚úÖ PAGE CONNEXION: Conforme WCAG")


def test_wcag_accessibility_scan_page(logged_user):
    """Test WCAG pour la page de scan (n√©cessite une connexion)"""
    response = logged_user.get('/scan')
    assert response.status_code == 200

    tester = WCAGTester(response.data.decode('utf-8'))
    all_issues = []

    all_issues.extend(tester.check_button_accessibility())
    all_issues.extend(tester.check_page_title())
    all_issues.extend(tester.check_heading_structure())

    # V√©rifications sp√©cifiques √† la page de scan
    soup = BeautifulSoup(response.data.decode('utf-8'), 'html.parser')

    # V√©rifier les champs de fichier
    file_inputs = soup.find_all('input', {'type': 'file'})
    for file_input in file_inputs:
        if not file_input.get('accept'):
            all_issues.append("Champ fichier sans attribut 'accept' pour filtrer les types")

    # V√©rifier les boutons d'action
    scan_buttons = soup.find_all('button', class_='connexion')
    if len(scan_buttons) < 2:
        all_issues.append("Pas assez de boutons d'action trouv√©s sur la page de scan")

    if all_issues:
        print(f"\nüö® PROBL√àMES WCAG PAGE SCAN: {len(all_issues)} trouv√©s")
        for issue in all_issues:
            print(f"  - {issue}")
    else:
        print("\n‚úÖ PAGE SCAN: Conforme WCAG")


def test_wcag_accessibility_result_page(logged_user, test_image):
    """Test WCAG pour la page de r√©sultats"""
    # Simuler un upload et redirection vers r√©sultats
    with patch('python_file.app.supabase') as mock_supabase, \
            patch('python_file.app.footprint_model') as mock_ia:

        mock_upload_response = MagicMock()
        mock_upload_response.error = None
        mock_supabase.storage.from_().upload.return_value = mock_upload_response
        mock_supabase.storage.from_().get_public_url.return_value = "http://test-image.jpg"

        mock_ia.predict.return_value = {
            'animal': 'Renard',
            'confidence': 0.85,
            'card_url': 'http://test-card.jpg',
            'fun_fact': 'Test fact about foxes'
        }

        # Simuler la session avec les r√©sultats
        with logged_user.session_transaction() as sess:
            sess['analysis_result'] = {
                'animal': 'Renard',
                'confidence': 85.0,
                'card_url': 'http://test-card.jpg',
                'fun_fact': 'Test fact about foxes'
            }
            sess['image_url'] = 'http://test-image.jpg'

        response = logged_user.get('/scan_result')
        assert response.status_code == 200

        tester = WCAGTester(response.data.decode('utf-8'))
        all_issues = []

        all_issues.extend(tester.check_images_alt_text())
        all_issues.extend(tester.check_heading_structure())
        all_issues.extend(tester.check_button_accessibility())
        all_issues.extend(tester.check_page_title())

        if all_issues:
            print(f"\nüö® PROBL√àMES WCAG PAGE R√âSULTATS: {len(all_issues)} trouv√©s")
            for issue in all_issues:
                print(f"  - {issue}")
        else:
            print("\n‚úÖ PAGE R√âSULTATS: Conforme WCAG")


def test_wcag_comprehensive_report(client, logged_user):
    """Rapport complet de conformit√© WCAG"""
    print("\n" + "=" * 60)
    print("üîç RAPPORT COMPLET DE CONFORMIT√â WCAG - WILDAWARE")
    print("=" * 60)

    pages_to_test = [
        ('/', 'Page d\'accueil'),
        ('/login', 'Page de connexion'),
        ('/inscription', 'Page d\'inscription')
    ]

    total_issues = 0

    for url, page_name in pages_to_test:
        print(f"\nüìÑ Test de {page_name} ({url})")
        print("-" * 40)

        response = client.get(url)
        if response.status_code != 200:
            print(f"‚ùå Erreur: Page non accessible (code {response.status_code})")
            continue

        tester = WCAGTester(response.data.decode('utf-8'))
        page_issues = []

        # Tests complets
        page_issues.extend(tester.check_images_alt_text())
        page_issues.extend(tester.check_heading_structure())
        page_issues.extend(tester.check_form_labels())
        page_issues.extend(tester.check_button_accessibility())
        page_issues.extend(tester.check_semantic_structure())
        page_issues.extend(tester.check_keyboard_navigation())
        page_issues.extend(tester.check_page_title())
        page_issues.extend(tester.check_language_attribute())
        page_issues.extend(tester.check_color_contrast())

        if page_issues:
            print(f"üö® {len(page_issues)} probl√®me(s) trouv√©(s):")
            for i, issue in enumerate(page_issues, 1):
                print(f"   {i}. {issue}")
        else:
            print("‚úÖ Aucun probl√®me d√©tect√©")

        total_issues += len(page_issues)

    # Test de la page scan (avec connexion)
    print(f"\nüìÑ Test de Page de scan (/scan)")
    print("-" * 40)

    response = logged_user.get('/scan')
    if response.status_code == 200:
        tester = WCAGTester(response.data.decode('utf-8'))
        scan_issues = []
        scan_issues.extend(tester.check_button_accessibility())
        scan_issues.extend(tester.check_page_title())
        scan_issues.extend(tester.check_heading_structure())

        if scan_issues:
            print(f"üö® {len(scan_issues)} probl√®me(s) trouv√©(s):")
            for i, issue in enumerate(scan_issues, 1):
                print(f"   {i}. {issue}")
        else:
            print("‚úÖ Aucun probl√®me d√©tect√©")

        total_issues += len(scan_issues)

    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DE CONFORMIT√â WCAG")
    print("=" * 60)

    if total_issues == 0:
        print("üéâ F√âLICITATIONS! Application enti√®rement conforme WCAG")
        compliance_level = "100%"
    elif total_issues <= 5:
        print(f"‚úÖ Bonne conformit√© WCAG ({total_issues} probl√®mes mineurs)")
        compliance_level = "Tr√®s bon"
    elif total_issues <= 10:
        print(f"‚ö†Ô∏è  Conformit√© acceptable ({total_issues} probl√®mes √† corriger)")
        compliance_level = "Acceptable"
    else:
        print(f"‚ùå Conformit√© insuffisante ({total_issues} probl√®mes importants)")
        compliance_level = "Insuffisant"

    print(f"üìà Niveau de conformit√©: {compliance_level}")
    print(f"üî¢ Nombre total de probl√®mes: {total_issues}")

    print("\nüìã RECOMMANDATIONS PRIORITAIRES:")
    print("1. Ajouter des attributs alt descriptifs √† toutes les images")
    print("2. S'assurer que tous les formulaires ont des labels appropri√©s")
    print("3. V√©rifier la hi√©rarchie des titres (H1, H2, H3...)")
    print("4. Ajouter l'attribut lang='fr' √† la balise <html>")
    print("5. Tester la navigation au clavier sur toutes les pages")

    print("\nüîó RESSOURCES UTILES:")
    print("- WCAG 2.1 Guidelines: https://www.w3.org/WAI/WCAG21/quickref/")
    print("- Validator WAVE: https://wave.webaim.org/")
    print("- axe DevTools: https://www.deque.com/axe/devtools/")

    # Le test passe toujours mais affiche le rapport
    assert True, "Rapport de conformit√© WCAG g√©n√©r√©"


if __name__ == "__main__":
    # Pour ex√©cuter directement le fichier de test
    pytest.main([__file__, "-v"])